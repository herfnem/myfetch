name: Rust CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# on:
#   push:
#     branches: [main]
#   pull_request:
#   release:
#     types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: cargo build --verbose


  release:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v3
      - name: Build Release
        run: cargo build --release
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: binary
          path: target/release/myfetch

      - name: Create Release
        id: create_release
        uses: actions/create-release@v3
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset 
        id: upload-release-asset 
        uses: actions/upload-release-asset@v3
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./target/release/myfetch
          asset_name: app_name
          asset_content_type: application/x-executable
